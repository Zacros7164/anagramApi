{"version":3,"sources":["InputForm.js","App.js","serviceWorker.js","index.js"],"names":["InputForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","anagramTest","event","preventDefault","word1","document","getElementById","value","word2","setState","message","axios","method","url","concat","window","apiHost","data","then","response","results","state","react_default","a","createElement","onSubmit","type","id","placeholder","Component","App","className","src_InputForm","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0RA+DeA,cAzDX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOJI,YAAc,SAACC,GACXA,EAAMC,iBACN,IAAMC,EAAQC,SAASC,eAAe,SAASC,MACzCC,EAAQH,SAASC,eAAe,SAASC,MAC/Cb,EAAKe,SAAS,CACVC,QAAS,gBAEbC,IAAM,CACFC,OAAQ,OACRC,IAAG,GAAAC,OAAKC,OAAOC,QAAZ,gBACHC,KAAM,CACFb,QACAI,WAELU,KAAK,SAACC,IACwB,IAA1BA,EAASF,KAAKG,QACb1B,EAAKe,SAAS,CACVC,QAAO,0BAGXhB,EAAKe,SAAS,CACVC,QAAO,iCA3BnBhB,EAAK2B,MAAQ,CACTX,QAAO,8CAHDhB,wEAuCV,OACI4B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,SAAU5B,KAAKI,aACjBqB,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,GAAG,QAAQC,YAAY,yBAC1CN,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,GAAG,QAAQC,YAAY,0BAC1CN,EAAAC,EAAAC,cAAA,UAAQE,KAAK,UAAb,YAGRJ,EAAAC,EAAAC,cAAA,WACK3B,KAAKwB,MAAMX,iBAnDRmB,aCQTC,MARf,WACE,OACER,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACbT,EAAAC,EAAAC,cAACQ,EAAD,QCKcC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASlC,SAASC,eAAe,SD2H3C,kBAAmBkC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.59f9fc78.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass InputForm extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            message: `Enter 2 words to test if they are anagrams`\n        }\n    }\n\n\n    anagramTest = (event)=>{\n        event.preventDefault();\n        const word1 = document.getElementById(\"word1\").value;\n        const word2 = document.getElementById(\"word2\").value;\n        this.setState({\n            message: 'Checking...'\n        })\n        axios({\n            method: \"POST\",\n            url: `${window.apiHost}/anagramTest`,\n            data: {\n                word1,\n                word2\n            }\n        }).then((response)=>{\n            if(response.data.results === true){\n                this.setState({\n                    message: `Yes they are anagrams`\n                })\n            }else{\n                this.setState({\n                    message: `No, they are not anagrams`\n                })\n            }\n        })\n    }\n\n    render() {\n\n\n\n        return (\n            <div>\n                <div>\n                    <form onSubmit={this.anagramTest}>\n                        <input type=\"text\" id=\"word1\" placeholder=\"Enter the first word\" />\n                        <input type=\"text\" id=\"word2\" placeholder=\"Enter the second word\" />\n                        <button type=\"submit\">Submit</button>\n                    </form>\n                </div>\n                <div>\n                    {this.state.message}\n                </div>\n            </div>\n        )\n    }\n};\n\n\nexport default InputForm;","import React from 'react';\nimport InputForm from './InputForm';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App-header\">\n      <InputForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}